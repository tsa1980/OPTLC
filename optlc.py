#!/usr/bin/env python
# -*- coding: CP866 -*-
# (c) Токарев С.А. 2009-2016
# Программа для расчёта
# параметров схем замещения линий 
# - со стальными тросами
# - с учётом взаимоиндукции

import pyexpat
import sys
import math
import string

VERSION = "1.0"

if len(sys.argv) == 1 :
    print "OPTLC v." + VERSION, "(c) Токарев С.А."
    print "Используйте : [python] ./optlc.py <xml-file>"
    sys.exit()


xmlfile = open(sys.argv[1], "r")

###########################
# Параметры земли(грунта) #
###########################
ro   = 1134.05428945	# Удельное сопротивление земли по умолчанию, Ом*м 
		        # При таком значении Dearth = 1000 м


###############
# Длина линии #
###############
length = 1.			# Длина линии по умолчанию, 1 км 


############################
# Частота переменного тока #
############################
freq   = 50.			     # Частота переменного тока, Гц


###################
# Параметры цепей #
###################
line = []



##################################
# Параметры грозозащитных тросов #
# заземлённых по концам          #
##################################
wire = []


##################################
# Параметры грозозащитных тросов #
# заземлённых c одного конца     #
##################################
rope = []


############################
# Вспомогательные величины #
############################
item = {}
X    = []
Y    = []
pcdata = ""



#############################
# Интерфейс обработчика XML #
#############################
def end_element(name):
    global line, wire, rope, item, X, Y, pcdata, ro, length, freq
    if name == 'data':
        pass
    elif name == 'line':
	item['X'] = X
	item['Y'] = Y
	X = []
	Y = []
	line.append(item)
	item = {}
    elif name == 'wire':
	item['X'] = X
	item['Y'] = Y
	X = []
	Y = []
	wire.append(item)
	item = {}
    elif name == 'rope':
	item['X'] = X
	item['Y'] = Y
	X = []
	Y = []
	rope.append(item)
	item = {}
    elif name == 'ro':
	ro = string.atof(pcdata)
    elif name == 'freq':
	freq = string.atof(pcdata)
    elif name == 'length':
	length = string.atof(pcdata)
    elif name == 'X':
	X.append(string.atof(pcdata))
    elif name == 'Y':
	Y.append(string.atof(pcdata))
    elif name == 'name':
	item[name.encode("CP866")] = pcdata
    else:
	item[name.encode("CP866")] = string.atof(pcdata)
     

def char_data(data):
    global pcdata
    pcdata = data.encode("CP866")


xmldata = pyexpat.ParserCreate()
xmldata.returns_unicode = 1
xmldata.EndElementHandler = end_element
xmldata.CharacterDataHandler = char_data

xmldata.ParseFile(xmlfile)

xmlfile.close()


###################################
# Параметры массивов и счетчиков  #
###################################
l = len(line)	# Количество линий/цепей
w = len(wire)	# Количество тросов заземлённых по концам
r = len(rope)	# Количество тросов заземлённых c одного конца
n = l + w + r	# Общее количество линий/цепей и тросов 



###################################
# Заполняем значения по умолчанию #
###################################
itemdefvals = {'n':1, 'l':0.0, 'f':0.0, 'dX':0.0, 'dY':0.0}

def getitem(index):
    if index < l:
	return line[index]
    elif index < l+w:
	return wire[index-l]
    return rope[index-l-w]

for i in xrange(n):
    item = getitem(i)
    for j in itemdefvals.keys():
        if not item.has_key(j):
            item[j] = itemdefvals[j]
              

###########################
# Параметры земли(грунта) #
###########################
lmbd   = 1./ro/10		        # Удельная проводимость земли [РУРЗ №11], 1/(Ом*см)]
Dearth = 66.4 / math.sqrt(freq * lmbd)  # Эквивалентная глубина обратного провода [РУРЗ №11, (2-64)], м
Rearth = math.pi*math.pi*freq/1E4       # Сопротивление учитывающее потери активной мощности в земле [РУРЗ №11, (2-66)], Ом/км


####################
# Матрица и вектор #
####################
def matrix(n):
    mat = []
    for i in xrange(n):
        mat.append([])
        for j in xrange(n):
            mat[i].append(0.0)
    return mat

# Нижняя треугольная матрица
def ltmatrix(n):
    mat = []
    for i in xrange(n):
        mat.append([])
        for j in xrange(i+1):
            mat[i].append(0.0)
    return mat

def vector(n):
    vec = []
    for i in xrange(n):
        vec.append(0.0)
    return vec

#####################################################################################################
#####################################################################################################
####                                                                                             ####
####   Р А С Ч Ё Т   П Р О Д О Л Ь Н Ы Х   П А Р А М Е Т Р О В   С Х Е М Ы   З А М Е Щ Е Н И Я   ####
####                                                                                             ####
#####################################################################################################
#####################################################################################################


#######################################
# Эквивалентный радиус провода(троса) #
#######################################
ROeq = vector(n)

for i in xrange(l):
    ROeq[i] = line[i]['k'] * line[i]['d'] / 2000.
    if line[i]['n'] > 1:
        ROeq[i] = math.pow(ROeq[i] * math.pow( line[i]['a'], line[i]['n']-1), 1./line[i]['n'])

for i in xrange(l, l+w):
    ROeq[i] = wire[i-l]['d']/2000. / math.pow(10., wire[i-l]['x']/0.145)



###################################
# Среднегеометрические расстояния #
###################################

# Рассчитывает среднегеометрические расстояния
# между проводами и тросами, а также их отражениями 
def gavg(ii, jj, prm):
    p = []
    pi = getitem(ii)
    pj = getitem(jj)
    for i in xrange(len(pi['X'])):
	xi = pi['X'][i] + pi['dX']
	yi = pi['Y'][i] + pi['dY'] - pi['l'] - 2./3.*pi['f']
        for j in xrange(len(pj['X'])):
	    xj = pj['X'][j] + pj['dX']
	    yj = pj['Y'][j] + pj['dY'] - pj['l'] - 2./3.*pj['f']
            d = math.hypot(xi - xj, yi - yj)
            if prm == "S":
                d = math.hypot(xi - xj, yi + yj)
            elif prm == "SL":
                if d <= 0.001 :  
                    d = 2*yi
                else:
                    d = 0.0  
            elif prm == "SM" :
                if d > 0.001 :  
                    d = math.hypot(xi - xj, yi + yj)
	    if d > 0.001:
	        p.append(d)
    if len(p) == 0:
	return 0
    pp = 1.0
    for i in p:
	pp = pp * i
    return pp**(1./len(p))	
    
Davg = ltmatrix(n)
for i in xrange(n):
    for j in xrange(i+1):
	Davg[i][j] = gavg(i,j,"D")

##################################################################
# Продольные параметры схемы замещения прямой последовательности #
##################################################################
Z1 = vector(l)
for i in xrange(l):
    Z1[i] = line[i]['r'] / line[i]['n'] + 0.002894j*freq * math.log10(Davg[i][i] / ROeq[i])


###################################################################
# Продольные параметры схемы замещения нулевой последовательности #
###################################################################
Z0 = matrix(l+w)

# Собственные сопротивления линий
for i in xrange(l):
    Z0[i][i] = line[i]['r'] / line[i]['n'] + 3*Rearth + 0.008682j*freq * math.log10(Dearth / pow(Davg[i][i]**2 * ROeq[i], 1./3.) )

# Взаимные сопротивления линий
for i in xrange(l):
    for j in xrange(i):
	Z0[j][i] = Z0[i][j] = 3*Rearth + 0.008682j*freq * math.log10(Dearth / Davg[i][j])

# Собственные сопротивления тросов
for i in xrange(l,l+w):
    Z0[i][i] = 3*wire[i-l]['r'] + 3*Rearth + 0.008682j*freq * math.log10(Dearth / ROeq[i])

# Взаимные сопротивления тросов и линий
for i in xrange(l,l+w):
    for j in xrange(i):
        if j < l :
            msign = -1
        else:
            msign = 1
	Z0[j][i] = Z0[i][j] = msign*(3*Rearth + 0.008682j*freq * math.log10(Dearth / Davg[i][j])) 

# Сокращяем тросы
for k in xrange(l+w-1,l-1,-1):
    major = Z0[k][k]
    for j in xrange(l+w):
        Z0[k][j] /= major
    for i in xrange(l+w):     
	minor = Z0[i][k]
	for j in xrange(l+w):
	    Z0[i][j] -= minor*Z0[k][j]


#####################################################################################################
#####################################################################################################
####                                                                                             ####
####   Р А С Ч Ё Т   П О П Е Р Е Ч Н Ы Х   П А Р А М Е Т Р О В   С Х Е М Ы   З А М Е Щ Е Н И Я   ####
####                                                                                             ####
#####################################################################################################
#####################################################################################################


#######################################
# Эквивалентный радиус провода(троса) #
#######################################
for i in xrange(l):
    ROeq[i] = line[i]['d'] / 2000.
    if line[i]['n'] > 1:
        ROeq[i] = (ROeq[i] * line[i]['a']**(line[i]['n']-1))** (1./line[i]['n'])

for i in xrange(l, l+w):
    ROeq[i] = wire[i-l]['d'] / 2000. 

for i in xrange(l+w, n):
    ROeq[i] = rope[i-l-w]['d']/2000.


###################################
# Среднегеометрические расстояния #
###################################
Savg  = ltmatrix(n)
for i in xrange(n):
    for j in xrange(i+1):
	Savg[i][j] = gavg(i,j,"S")

SLavg = vector(l)
SMavg = vector(l)
for i in xrange(l):
    SLavg[i]  = gavg(i,i,"SL")
    SMavg[i]  = gavg(i,i,"SM")


##################################################################
# Поперечные параметры схемы замещения прямой последовательности #
##################################################################
Y1 = vector(l)
for i in xrange(l):
    Y1[i] = 2*math.pi*freq / (41.389E6 * math.log10(Davg[i][i] * SLavg[i] / ROeq[i] / SMavg[i]))


###################################################################
# Поперечные параметры схемы замещения нулевой последовательности #
###################################################################
A0 = matrix( max(n,2*l) )

# Собственные коэффициенты линий
for i in xrange(l):
    A0[i][i] = 124.17E6 * math.log10(Savg[i][i] / pow(Davg[i][i]**2 * ROeq[i], 1./3.) )

# Взаимные коэффициенты линий
for i in xrange(l):
    for j in xrange(i):
	A0[j][i] = A0[i][j] = 124.17E6 * math.log10(Savg[i][j] / Davg[i][j])

# Собственные коэффициенты тросов
for i in xrange(l,n):
    A0[i][i] = 41.389E6 * math.log10(Savg[i][i] / ROeq[i])

# Взаимные коэффициенты тросов
for i in xrange(l,n):
    for j in xrange(l,i):
	A0[j][i] = A0[i][j] = 41.389E6 * math.log10(Savg[i][j] / Davg[i][j])


# Взаимные коэффициенты между линиями и тросами
for i in xrange(l,n):
    for j in xrange(l):
	A0[j][i] = 41.389E6 * math.log10(Savg[i][j] / Davg[i][j])
	A0[i][j] = 3 * A0[j][i]

# Сокращяем тросы
for k in xrange(n-1,l-1,-1):
    major = A0[k][k]
    for j in xrange(n):
        A0[k][j] /= major
    for i in xrange(n):     
	minor = A0[i][k]
	for j in xrange(n):
	    A0[i][j] -= minor*A0[k][j]


# Обращаем матрицу методом Гаусса
# При использовании NumPy или SciPy можно написать
# Y0 = 2*math.pi*freq * numpy.linalg.inv(A0[:l,:l])
for k in xrange(l):
    A0[k][k+l] = 1.0

for k in xrange(l):
    major = A0[k][k];
    for j  in xrange(k+l+1):
        A0[k][j] /= major 	
    for i in xrange(k+1, k+l):
        major = A0[i][k]
	for j in xrange(k+l+1):
            A0[i][j] -= A0[k][j]*major


for k in xrange(l):
    for i in xrange(l-1, -1, -1):
        A0[i+l][k] = A0[i][k+l] 
        for j in xrange (l-1, i, -1):
            A0[i+l][k] -= A0[i][j]*A0[j+l][k]

# Заполняем матрицу проводимостей
Y0 = ltmatrix(l)
for i in xrange(l):
    Y0[i][i] = 2*math.pi*freq * A0[i+l][i] 
    for j in xrange(i):
        Y0[i][j] = -2*math.pi*freq * A0[i+l][j]



#################################################
#################################################
####                                         ####
####   П Е Ч А Т Ь   Р Е З У Л Ь Т А Т О В   ####
####                                         ####
#################################################
#################################################

print "OPTLC v." + VERSION, "- \"" + unicode(sys.argv[1], "CP1251").encode("CP866")  + "\""
print "Линий -", l
print "Грозозащитных тросов -", w, "+", r 
print "Длина линии(участка линий) -", round(length,2), "км" 
print "Частота переменного тока -", round(freq,1), "Гц" 
print "Удельное сопротивление грунта -", round(ro,1), "Ом*м" 
print "Эквивалентная глубина расположения обратного провода в земле -", int(Dearth), "м" 
print 
print "┌──────────────────────────────────────────────────────────────────────────────┐"
print "│ Параметры схемы замещения прямой(обратной) последовательности                │"
print "├─────────┬─────────┬─────────┬────────────────────────────────────────────────┤"
print "│  R, Ом  │  X, Ом  │ B, мкСм │ Наименование                                   │"
print "├─────────┼─────────┼─────────┼────────────────────────────────────────────────┤"
for i in xrange(l):
    print "│%9.3f│%9.3f│%9.3f│ %-47s│" % (Z1[i].real*length, Z1[i].imag*length, Y1[i]*1E6*length, line[i]['name'])
print "└─────────┴─────────┴─────────┴────────────────────────────────────────────────┘"
print
print "┌──────────────────────────────────────────────────────────────────────────────┐"
print "│ Параметры схемы замещения нулевой последовательности (собственные)           │"
print "├─────────┬─────────┬─────────┬────────────────────────────────────────────────┤"
print "│  R, Ом  │  X, Ом  │ B, мкСм │ Наименование                                   │"
print "├─────────┼─────────┼─────────┼────────────────────────────────────────────────┤"
for i in xrange(l):
    print "│%9.3f│%9.3f│%9.3f│ %-47s│" % (Z0[i][i].real*length, Z0[i][i].imag*length, Y0[i][i]*1E6*length, line[i]['name'])
print "└─────────┴─────────┴─────────┴────────────────────────────────────────────────┘"
print
print "┌──────────────────────────────────────────────────────────────────────────────┐"
print "│ Параметры схемы замещения нулевой последовательности (взаимные)              │"
print "├─────────┬─────────┬─────────┬────────────────────────────────────────────────┤"
print "│  R, Ом  │  X, Ом  │ B, мкСм │ Наименование                                   │"
print "├─────────┼─────────┼─────────┼────────────────────────────────────────────────┤"
for i in xrange(l):
    for j in xrange(i):
        print "│%9.3f│%9.3f│%9.3f│ %-47s│" % (Z0[i][j].real*length, Z0[i][j].imag*length, Y0[i][j]*1E6*length,"╔> "+line[j]['name'])
        print "│         │         │         │ %-47s│" % ( "╚> "+line[i]['name'])
        if j < l-2:
            print "├─────────┼─────────┼─────────┼────────────────────────────────────────────────┤"

print "└─────────┴─────────┴─────────┴────────────────────────────────────────────────┘"
print
print
print "                                   * * *"
print
print "┌──────────────────────────────────────────────────────────────────────────────┐"
print "│ Исходные параметры линий                                                     │"
print "├───────┬─────┬─────┬───┬─────┬────────────────────────────────────────────────┤"
print "│   r,  │  k  │  d, │ n │  a, │ Наименование                                   │"
print "│ Ом/км │     │  мм │   │  м  │                                                │"
print "├───────┼─────┼─────┼───┼─────┼────────────────────────────────────────────────┤"
for i in xrange(l):
    if line[i]['n'] > 1:
        print "│%7.4f│%5.2f│%5.1f│ %1d │%5.2f│ %-47s│" % (line[i]['r'], line[i]['k'], line[i]['d'], line[i]['n'], line[i]['a'], line[i]['name'])
    else:
        print "│%7.4f│%5.2f│%5.1f│ %1d │  -  │ %-47s│" % (line[i]['r'], line[i]['k'], line[i]['d'], line[i]['n'],               line[i]['name'])
print "├───────┴─────┴─────┴───┴─────┴────────────────────────────────────────────────┤"
print "├───────┬───────┬──────┬──────┬────────────────────────────────────────────────┤"
print "│   l,  │   f,  │  dX, │  dY, │ Наименование                                   │"
print "│   м   │   м   │   м  │   м  │                                                │"
print "├───────┼───────┼──────┼──────┼────────────────────────────────────────────────┤"
for i in xrange(l):
    print "│%7.2f│%7.2f│%6.1f│%6.1f│ %-47s│" % (line[i]['l'], line[i]['f'], line[i]['dX'], line[i]['dY'], line[i]['name'])
print "├───────┴───────┴──────┴──────┴────────────────────────────────────────────────┤"
print "├─────────┬─────────┬─────────┬────────────────────────────────────────────────┤"
print "│  Xa, м  │  Xb, м  │  Xc, м  │ Наименование                                   │"
print "│  Ya, м  │  Yb, м  │  Yc, м  │                                                │"
print "├─────────┼─────────┼─────────┼────────────────────────────────────────────────┤"
for i in xrange(l):
    print "│%9.2f│%9.2f│%9.2f│ %-47s│" % (line[i]['X'][0], line[i]['X'][1], line[i]['X'][2], line[i]['name'])
    print "│%9.2f│%9.2f│%9.2f│ %-47s│" % (line[i]['Y'][0], line[i]['Y'][1], line[i]['Y'][2], "")
    if i < l-1:
        print "├─────────┼─────────┼─────────┼────────────────────────────────────────────────┤"
print "└─────────┴─────────┴─────────┴────────────────────────────────────────────────┘"
print
if w != 0 or r != 0:
    print "┌──────────────────────────────────────────────────────────────────────────────┐"
    print "│ Исходные параметры грозозащитных тросов                                      │"
    print "├─────┬─────┬─────┬─────┬─────┬────────────────────────────────────────────────┤"
    print "│  r, │  x, │  d, │  l, │  f, │ Наименование                                   │"
    print "│Ом/км│Ом/км│  мм │  м  │  м  │                                                │"
    print "├─────┼─────┼─────┼─────┼─────┼────────────────────────────────────────────────┤"
    for i in xrange(w):
        print "│%5.2f│%5.2f│%5.1f│%5.1f│%5.1f│ %-47s│" % (wire[i]['r'], wire[i]['x'], wire[i]['d'], wire[i]['l'], wire[i]['f'], "Трос № " + str(i+1))
    for i in xrange(r):
        print "│  -  │  -  │%5.1f│%5.1f│%5.1f│ %-47s│" % (rope[i]['d'], rope[i]['l'], rope[i]['f'], "Трос № " + str(w+i+1))
    print "├─────┴─────┴─────┴─────┴─────┴────────────────────────────────────────────────┤"
    print "├───────┬───────┬──────┬──────┬────────────────────────────────────────────────┤"
    print "│   X,  │   Y,  │  dX, │  dY, │ Наименование                                   │"
    print "│   м   │   м   │   м  │   м  │                                                │"
    print "├───────┼───────┼──────┼──────┼────────────────────────────────────────────────┤"
    for i in xrange(w):
        print "│%7.2f│%7.2f│%6.1f│%6.1f│ %-47s│" % (wire[i]['X'][0], wire[i]['Y'][0], wire[i]['dX'], wire[i]['dY'], "Трос № " + str(i+1))
    for i in xrange(r):
        print "│%7.2f│%7.2f│%6.1f│%6.1f│ %-47s│" % (rope[i]['X'][0], rope[i]['Y'][0], rope[i]['dX'], rope[i]['dY'], "Трос № " + str(w+i+1))
    print "└───────┴───────┴──────┴──────┴────────────────────────────────────────────────┘"
